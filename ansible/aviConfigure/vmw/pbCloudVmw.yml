---
- hosts: localhost
  connection: local
  gather_facts: no

  roles:
    - role: "avinetworks.avisdk"

  tasks:

    - name: Create Avi DNS provider Without donain names - VMW
      community.network.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ vmw.dns_provider_ref | default('dns-avi-vmw')}}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      when:
        - vmw.domains is defined
      tags:
        - dns

    - name: Update Avi DNS provider With donain names - VMW
      community.network.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op: add
        avi_api_update_method: patch
        internal_profile:
          dns_service_domain:
            - domain_name: "{{ item.name }}"
#              num_dns_ip: 1
              pass_through: true
              record_ttl: 100
          ttl: 300
        name: "{{ vmw.dns_provider_ref | default('dns-avi-vmw')}}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      loop: "{{ vmw.domains }}"
      when:
        - vmw.domains is defined
      tags:
        - dns

    - name: Defining variable vcenter_configuration - VMW
      set_fact:
        vcenter_configuration:
          username: "{{ avi_vsphere_user }}"
          password: "{{ avi_vsphere_password }}"
          vcenter_url: "{{ avi_vsphere_server }}"
          privilege: WRITE_ACCESS
          datacenter: "{{ vcenter.dc }}"
      when:
        - vmw is defined
      tags:
        - cloud
        - vmw

    - name: Configure Avi Cloud - VMW
      community.network.avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name:  "{{ vmw.name }}"
        vtype: CLOUD_VCENTER
        vcenter_configuration: "{{ vcenter_configuration }}"
        dhcp_enabled: "{{ vmw.dhcp_enabled }}"
      register: output_cloud_vmw
      when:
        - vmw is defined
      tags:
        - cloud
        - vmw

    - set_fact:
        cloud_vmw_uuid: "{{ output_cloud_vmw.obj.uuid }}"
      when:
        - vmw is defined
      tags:
        - cloud
        - vmw

    - name: Wait for network sync for cloud to complete...
      community.network.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "get"
        path: "cloudruntime"
        params:
          name: "{{ vmw.name }}"
      register: cloudruntime
      until: cloudruntime.obj.results[0].network_sync_complete
      retries: 30
      delay: 5

    - name: Configure cloud management network
      community.network.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "patch"
        path: '{{ "cloud/" + cloud_vmw_uuid }}'
        data:
          replace:
            vcenter_configuration:
              management_network: '{{ "/api/vimgrnwruntime/?name=" + vcenter.management_network.name }}'
      when:
        - vcenter.management_network.name is defined
        - cloud_vmw_uuid is defined

    - name: get Network details  - VMW
      community.network.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
        params:
          page_size: -1
      register: networkOutput
      tags:
        - cloud
        - network
        - ipamdns
      when:
        - vmw is defined

    - name: Update Mgmt Network - VMW
      community.network.avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vmw.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ vcenter.management_network.name }}"
        dhcp_enabled: "{{ vmw.management_network.dhcp_enabled | default(omit) }}"
        exclude_discovered_subnets: "{{ vmw.management_network.exclude_discovered_subnets | default(omit) }}"
        vcenter_dvs: "{{ vmw.management_network.vcenter_dvs | default(omit) }}"
      when:
        - vmw.management_network is defined
      tags:
        - cloud
        - network
        - ipamdns

    - name: get Network details - VMW
      community.network.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
        params:
          page_size: -1
      register: networkOutput
      tags:
        - cloud
        - network
        - ipamdns
      when:
        - vmw is defined

    - name: Define Network Range IP Begin - VMW - VIP - VIP
      set_fact:
        vipIpBegin: "{{ vmw.network_vip.cidr | ipaddr(vmw.network_vip.vipIpStartPool) }}"
      when:
        - vmw.network_vip.cidr is defined
        - vmw.network_vip.vipIpStartPool is defined

    - name: Define Network Range IP Begin - VMW - VIP - VIP
      set_fact:
        vipIpBegin: "{{ ipBegin.split('/')[0] }}"
      when:
        - vmw.network_vip.cidr is defined
        - vmw.network_vip.vipIpStartPool is defined

    - name: Define Network Range IP End - VMW - VIP - VIP
      set_fact:
        vipIpEnd: "{{ vmw.network_vip.cidr | ipaddr(vmw.network_vip.vipIpEndPool) }}"
      when:
        - vmw is defined
        - vmw.network_vip.cidr is defined
        - vmw.network_vip.vipIpEndPool is defined

    - name: Define Network Range IP End - VMW
      set_fact:
        vipIpEnd: "{{ ipEnd.split('/')[0] }}"
      when:
        - vmw.network_vip.cidr is defined
        - vmw.network_vip.vipIpEndPool is defined

    - name: Define Network Range IP Begin - VMW - VIP - SE
      set_fact:
        seIpBegin: "{{ vmw.network_vip.cidr | ipaddr(vmw.network_vip.seIpStartPool) }}"
      when:
        - vmw.network_vip.cidr is defined
        - vmw.network_vip.seIpStartPool is defined

    - name: Define Network Range IP Begin - VMW - VIP - SE
      set_fact:
        seIpBegin: "{{ ipBegin.split('/')[0] }}"
      when:
        - vmw.network_vip.cidr is defined
        - vmw.network_vip.seIpStartPool is defined

    - name: Define Network Range IP End - VMW - VIP - SE
      set_fact:
        seIpEnd: "{{ vmw.network_vip.cidr | ipaddr(vmw.network_vip.seIpEndPool) }}"
      when:
        - vmw.network_vip.cidr is defined
        - vmw.network_vip.seIpEndPool is defined

    - name: Define Network Range IP End - VMW - VIP - SE
      set_fact:
        seIpEnd: "{{ ipEnd.split('/')[0] }}"
      when:
        - vmw.network_vip.cidr is defined
        - vmw.network_vip.seIpEndPool is defined

    - name: Define configured_subnets for network - VMW- VIP
      set_fact:
        configured_subnets:
          - prefix:
              mask: "{{ vmw.network_vip.cidr.split('/')[1] }}"
              ip_addr:
                type: "{{ vmw.network_vip.type | default('V4') }}"
                addr: "{{ vmw.network_vip.cidr.split('/')[0] }}"
            static_ip_ranges:
              - range:
                  begin:
                    type: "{{ vmw.network_vip.type | default('V4') }}"
                    addr: "{{ vipIpBegin }}"
                  end:
                    type: "{{ vmw.network_vip.type | default('V4') }}"
                    addr: "{{ vipIpEnd }}"
                type: "STATIC_IPS_FOR_VIP"
              - range:
                  begin:
                    type: "{{ vmw.network_vip.type | default('V4') }}"
                    addr: "{{ seIpBegin }}"
                  end:
                    type: "{{ vmw.network_vip.type | default('V4') }}"
                    addr: "{{ seIpEnd }}"
                type: "STATIC_IPS_FOR_SE"
      when:
        - vipIpBegin is defined
        - vipIpEnd is defined
        - seIpBegin is defined
        - seIpEnd is defined
        - vmw.network_vip.cidr is defined

    - name: Update Vip Network - VMW
      community.network.avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vmw.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        name: "{{ vcenter.vip_network.name }}"
        configured_subnets: "{{ configured_subnets }}"
        dhcp_enabled: "{{ vmw.network_vip.dhcp_enabled }}"
        exclude_discovered_subnets: "{{ vmw.network_vip.exclude_discovered_subnets }}"
        vcenter_dvs: "{{ vmw.network_vip.vcenter_dvs }}"
      register: output_network_vip_vmw
      when:
        - vmw.network_vip is defined
      tags:
        - ipam

    - name: Define subnet variable for backend network - VMW
      set_fact:
        configured_subnets:
          - prefix:
              mask: "{{ vmw.network_backend.cidr.split('/')[1] }}"
              ip_addr:
                type: "{{ vmw.network_backend.type | default('V4') }}"
                addr: "{{ vmw.network_backend.cidr.split('/')[0] }}"
      when:
        - vmw.network_backend is defined
      tags:
        - ipam

    - name: Update Network backend - VMW
      community.network.avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vmw.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        name: "{{ vmw.network_backend.name }}"
        configured_subnets: "{{ configured_subnets }}"
        dhcp_enabled: "{{ vmw.network_backend.dhcp_enabled }}"
        exclude_discovered_subnets: "{{ vmw.network_backend.exclude_discovered_subnets }}"
        vcenter_dvs: "{{ vmw.network_backend.vcenter_dvs }}"
      when:
        - vmw.network_backend is defined
      tags:
        - ipam

    - name: Create Avi IPAM - VMW
      community.network.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        internal_profile:
          usable_networks:
            - nw_ref: "/api/network/{{ output_network_vip_vmw.obj.uuid | default(networkVipUuid) }}"
        name: "{{ vmw.ipam_provider_ref | default('ipam-avi-vmw') }}"
        type: IPAMDNS_TYPE_INTERNAL
      when:
        - vmw.network_vip is defined
      tags:
        - ipam

    - name: Update Avi Cloud (Vcenter)
      community.network.avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_update_method: patch
        avi_api_patch_op: add
        name: "{{ vmw.name }}"
        vtype: CLOUD_VCENTER
        vcenter_configuration: "{{ vcenter_configuration }}"
        dhcp_enabled: "{{ vmw.dhcp_enabled }}"
        ipam_provider_ref: "/api/ipamdnsproviderprofile/?name={{ vmw.ipam_provider_ref | default('ipam-avi-vmw') }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ vmw.dns_provider_ref | default('dns-avi-vmw') }}"
      when:
        - vmw.network_vip is defined
      tags:
        - cloud
        - ipam
        - dns

    - name: Modify/Creating SE group - VMW
      community.network.avi_serviceenginegroup:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vmw.name }}"
        avi_api_update_method: put
        name: "{{ item.name }}"
        ha_mode: "{{ item.ha_mode | default('HA_MODE_SHARED') }}"
        min_scaleout_per_vs: "{{ item.min_scaleout_per_vs | default(omit) }}"
        max_scaleout_per_vs: "{{ item.0.max_scaleout_per_vs | default(omit) }}"
        max_cpu_usage: "{{ item.0.max_cpu_usage | default(omit) }}"
        min_cpu_usage: "{{ item.0.min_cpu_usage | default(omit) }}"
        max_vs_per_se: "{{ item.max_vs_per_se | default(omit) }}"
        vs_scaleout_timeout: "{{ item.0.vs_scaleout_timeout | default(omit) }}"
        buffer_se: "{{ item.buffer_se | default(omit) }}"
        extra_shared_config_memory: "{{ item.extra_shared_config_memory | default(omit) }}"
        vcenter_folder: "{{ vcenter.folder | default(omit) }}"
        vcpus_per_se: "{{ item.vcpus_per_se | default(omit) }}"
        memory_per_se: "{{ item.memory_per_se | default(omit) }}"
        disk_per_se: "{{ item.disk_per_se | default(omit) }}"
        realtime_se_metrics: "{{ item.realtime_se_metrics | default(omit) }}"
        auto_rebalance: "{{ item.auto_rebalance | default(omit) }}"
        auto_rebalance_interval: "{{ item.auto_rebalance_interval | default(omit) }}"
        auto_rebalance_criteria: "{{ item.auto_rebalance_criteria | default(omit) }}"
      loop: "{{ vmw.serviceEngineGroup }}"
      loop_control:
        label: "Modifying SE group called {{ item.name }}"
      when:
        - vmw.serviceEngineGroup is defined
        - vmw.name is defined
      tags:
        - serviceEngineGroup

    - name: Modify/Creating SE group - VMW - for K8S cluster
      community.network.avi_serviceenginegroup:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vmw.name }}"
        avi_api_update_method: put
        name: "{{ item.serviceEngineGroup.name }}"
        ha_mode: "{{ item.serviceEngineGroup.ha_mode | default('HA_MODE_SHARED') }}"
        min_scaleout_per_vs: "{{ item.serviceEngineGroup.min_scaleout_per_vs | default(omit) }}"
        max_vs_per_se: "{{ item.max_vs_per_se | default(omit) }}"
        buffer_se: "{{ item.serviceEngineGroup.buffer_se | default(omit) }}"
        extra_shared_config_memory: "{{ item.serviceEngineGroup.extra_shared_config_memory | default(omit) }}"
        vcenter_folder: "{{ vcenter.folder | default(omit) }}"
        vcpus_per_se: "{{ item.serviceEngineGroup.vcpus_per_se | default(omit) }}"
        memory_per_se: "{{ item.serviceEngineGroup.memory_per_se | default(omit) }}"
        disk_per_se: "{{ item.serviceEngineGroup.disk_per_se | default(omit) }}"
        realtime_se_metrics: "{{ item.serviceEngineGroup.realtime_se_metrics | default(omit) }}"
        auto_rebalance: "{{ item.serviceEngineGroup.auto_rebalance | default(omit) }}"
        auto_rebalance_interval: "{{ item.serviceEngineGroup.auto_rebalance_interval | default(omit) }}"
        auto_rebalance_criteria: "{{ item.serviceEngineGroup.auto_rebalance_criteria | default(omit) }}"
        se_name_prefix: "{{ item.se_name_prefix | default(omit) }}"
      loop: "{{ vmw.kubernetes.clusters }}"
      loop_control:
        label: "Modifying SE group called {{ item.serviceEngineGroup.name }}"
      when:
        - vmw.kubernetes.clusters is defined
        - vmw.name is defined
      tags:
        - serviceEngineGroup